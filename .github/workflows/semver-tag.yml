name: Bump version tag

on:
  push:
    branches:
      - main

jobs:
  semver-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get latest tag
        id: tag
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "LATEST_TAG=$TAG" >> $GITHUB_ENV

      - name: Determine new version
        id: new_version
        run: |
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            LATEST_TAG=$(git describe --tags --abbrev=0)
          else
            LATEST_TAG="0.0.0"
          fi
          echo "LATEST_TAG=$LATEST_TAG"
          echo "Latest tag: $LATEST_TAG"

          # Get commits since last tag (only if tag exists)
          if [ "$LATEST_TAG" = "0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log $LATEST_TAG..HEAD --pretty=format:"%s")
          fi
          echo "Commits since last tag:"
          echo "$COMMITS"

          # Default bump
          BUMP="patch"

          # Determine bump type based on commits
          if echo "$COMMITS" | grep -qE 'feat!|BREAKING CHANGE'; then
            BUMP="major"
          elif echo "$COMMITS" | grep -qE '^feat'; then
            BUMP="minor"
          elif echo "$COMMITS" | grep -qE 'fix|chore|docs|hotfix'; then
            BUMP="patch"
          fi

          echo "Bump type: $BUMP"

          # Calculate new version manually
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_TAG"
          case $BUMP in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"

      - name: Create Git tag
        run: |
          git tag $NEW_VERSION
          git push origin $NEW_VERSION
